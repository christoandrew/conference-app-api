# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import attendee_service_pb2 as attendee__service__pb2


class AttendeesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A attendee_grpc.Channel.
        """
        self.GetAttendee = channel.unary_unary(
                '/attendees.Attendees/GetAttendee',
                request_serializer=attendee__service__pb2.AttendeeRequest.SerializeToString,
                response_deserializer=attendee__service__pb2.AttendeeResponse.FromString,
                )
        self.GetConferenceAttendees = channel.unary_stream(
                '/attendees.Attendees/GetConferenceAttendees',
                request_serializer=attendee__service__pb2.AttendeesRequest.SerializeToString,
                response_deserializer=attendee__service__pb2.Attendee.FromString,
                )


class AttendeesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAttendee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConferenceAttendees(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AttendeesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAttendee': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttendee,
                    request_deserializer=attendee__service__pb2.AttendeeRequest.FromString,
                    response_serializer=attendee__service__pb2.AttendeeResponse.SerializeToString,
            ),
            'GetConferenceAttendees': grpc.unary_stream_rpc_method_handler(
                    servicer.GetConferenceAttendees,
                    request_deserializer=attendee__service__pb2.AttendeesRequest.FromString,
                    response_serializer=attendee__service__pb2.Attendee.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'attendees.Attendees', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Attendees(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAttendee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/attendees.Attendees/GetAttendee',
            attendee__service__pb2.AttendeeRequest.SerializeToString,
            attendee__service__pb2.AttendeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConferenceAttendees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/attendees.Attendees/GetConferenceAttendees',
            attendee__service__pb2.AttendeesRequest.SerializeToString,
            attendee__service__pb2.Attendee.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
